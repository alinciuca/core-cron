@using Microsoft.AspNetCore.Identity
@using Core.Cron.Data
@using Kendo.Mvc.UI

@inject SignInManager<IdentityUser>	SignInManager
@inject UserManager<IdentityUser> UserManager
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()

@{
	ViewData["Title"] = "Services";
}

@if (!SignInManager.IsSignedIn(User))
{
	<h3>Please login</h3>
}
else
{
	<div id="ServicesGrid"></div>
	<div id="confirmationDeleteDialog"></div>
}
<script>
	$(document).ready(function () {
		var dataSource = new kendo.data.DataSource({
			transport: {
				read: {
					url: "Service/Read",
					dataType: "json",
					type: "POST",
					data: function () {
						return kendo.antiForgeryTokens();
					}
				},
				create: {
					url: "Service/Create",
					dataType: "json",
					type: "POST",
					data: function () {
						return kendo.antiForgeryTokens();
					}
				},
				destroy: {
					url: "Service/Delete",
					dataType: "json",
					type: "POST",
					data: function () {
						return kendo.antiForgeryTokens();
					}
				}
			}, schema: {
				data: "data",
				model: {
					id: "serviceId",
					fields: {
						serviceId: { type: "number", editable: false },
						serviceName: { type: "string" },
						serviceIdentifier: { type: "string", editable: false },
						dateAdded: { type: "date", editable: false },
						rowVersion: { type: "string", editable: false },
						updateFrequencyInMinutes: { type: "int", editable: false },
						heartbeatColor: { type: "string" },
						heartbeatTooltip: { type: "string" }
					}
				}
			},
			pageSize: 40,
			serverPaging: true,
			serverFiltering: true,
			serverSorting: true
			});
		$("#ServicesGrid").kendoGrid({
			toolbar: ["create"],
			dataSource: dataSource,
			height: 800,
			filterable: true,
			sortable: true,
			pageable: true,
			columns: [
				{
					field: "serviceName",
					title: "Service Name",
					template: "<span style='width:100%;cursor: pointer;'  title='#=heartbeatTooltip#'><span style='display: inline-block; background: #= heartbeatColor#; width:10px; height: 10px; border-radius: 5px;'></span> #=serviceName#</span>"
				},
				{ field: "serviceIdentifier", title: "Id" }, { field: "updateFrequencyInMinutes", title: "Update Frequency (minutes)" },
				{ command: ["edit", "destroy"], title: "&nbsp" }],
			editable: "inline"
		});

		var confirmationDeleteDialog = $('#confirmationDeleteDialog');
		
		confirmationDeleteDialog.kendoDialog({
			width: "450px",
			title: "Confirm delete",
			closable: true,
			modal: false,
			visible: false,
			content: "<p class='text-center'>Are you sure?",
			actions: [
				{ text: 'Yes', primary: true },
				{ text: 'No' }
			],
			close: onClose
		});
	});

	function forgeryToken() {
		return kendo.antiForgeryTokens();
	}

	function goToHeartbeats(e) {
		e.preventDefault();
		var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
		$("#HeartbeatWindow").data("kendoWindow").open();
	}

	function onDelete(e) {
		e.preventDefault();
	}

	function onClose() {
		$("#showDialogBtn").fadeIn();
	}

	function onOpen(dataItem) {
		$("#showDialogBtn").fadeOut();
	}

	function showDialog(e) {
		e.preventDefault();
		var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
		$('#DeleteConfirmation').data("kendoDialog").open(dataItem);
	}

	function deleteLine(e) {
		var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
		console.log(dataItem);
	}
</script>